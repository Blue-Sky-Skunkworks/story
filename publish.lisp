(in-package :story)

(defparameter *publish-path* (story-file "build/"))

(defun write-to-file (path text)
  (with-output-to-file (stream path :if-does-not-exist :create :if-exists :overwrite)
    (write-string text stream)))

(defun rsync (from to)
  (run-program-to-string "rsync" (list "-a" "--no-l" "-L" from to)))

(defun publish (&key (clear nil) (story *story*))
  (let ((publish-path (publish-directory story)))
    (note "Publishing to ~S." publish-path)
    (flet ((path (name)
             (let ((rtn (concatenate 'string publish-path (subseq name 1))))
               (ensure-directories-exist rtn)
               rtn)))
      (setup-server story)
      (when clear
        (cond
          ((y-or-n-p "Really recursively delete ~S?" publish-path)
           (iter (for file in (uiop:directory-files publish-path))
             (note "removing ~S" file)
             (delete-file file))
           (iter (for dir in (uiop:subdirectories publish-path))
             (cond
               ((equal (last1 (pathname-directory dir)) ".git")
                (note "skipping ~S" dir))
               (t
                (note "removing ~S" dir)
                (uiop:delete-directory-tree dir :validate t)))))
          (t
           (warn "Not publishing.")
           (return-from publish))))
      (ensure-directories-exist publish-path)
      (format t "~%css:~%")
      (iter (for (k v) in-hashtable *css*)
        (format t "  ~A~%" k)
        (write-to-file (path k) v))
      (format t "~%scripts:~%")
      (iter (for (k v) in-hashtable *scripts*)
        (format t "  ~A~%" k)
        (write-to-file (path k)
                       (typecase v
                         (string v)
                         (pathname (slurp-file v))
                         (t (funcall v)))))
      (when *production*
        (format t "~%imports:~%  /all.html~%")
        (write-to-file (path "/all.html") *all-imports*))
      (when (and *production* (cname story))
        (format t "~%cname:~%  /CNAME~%")
        (write-to-file (path "/CNAME") (cname story)))
      (format t "~%directories:~%")
      (iter (for (k v) in-hashtable *directories*)
        (format t "  ~A~%" k)
        (rsync v (path k)))
      (format t "~%pages:~%")
      (iter (for page in (children story))
        (let ((base (format nil "/~A" (slot-value page 'path))))
          (format t "  ~A~%" base)
          (write-to-file (path base)
                         (with-output-to-string (stream)
                           (funcall (renderer page) page stream)))))
      ))
  ;; (format t "~%dispatches:~%")
  ;; (iter (for el in *module-dispatches*) (format t "  ~A~%" el))
  )
